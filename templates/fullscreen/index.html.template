<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OPS Digital Signage - {LOCATION}</title>
    <link rel="stylesheet" href="{THEME_PATH}">
    <style>
        /* Full-screen slideshow styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html, body {
            height: 100%;
            width: 100%;
            overflow: hidden;
            background-color: #000;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            display: flex;
            flex-direction: column;
        }

        /* Full-screen slide container */
        #slideContainer {
            height: 100vh;
            width: 100vw;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #000;
            overflow: hidden !important;
        }

        #slideContainer iframe {
            width: 100vw !important;
            height: 100vh !important;
            border: none;
            /* Balanced approach - uniform scaling to maintain proportions */
            transform: scale(1.0) !important;
            transform-origin: center center !important;
            object-fit: contain !important;
            /* Additional fallbacks */
            min-width: 100vw !important;
            min-height: 100vh !important;
        }

        /* Loading state */
        .loading {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            color: white;
            font-size: 1.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .loading::before {
            content: '';
            display: block;
            width: 60px;
            height: 60px;
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 2rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Error state */
        .error-message {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
            color: white;
            text-align: center;
            padding: 2rem;
        }

        .error-message h2 {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .error-message p {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            max-width: 600px;
        }

        .retry-message {
            font-size: 1.2rem;
            opacity: 0.8;
            font-style: italic;
            margin-top: 2rem;
        }

        /* No-content fallback */
        .no-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            text-align: center;
            padding: 2rem;
        }

        .no-content h1 {
            font-size: 4rem;
            margin-bottom: 2rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .no-content p {
            font-size: 1.8rem;
            margin-bottom: 1rem;
            opacity: 0.9;
        }

        .no-content .device-id {
            font-size: 1.2rem;
            opacity: 0.7;
            margin-top: 3rem;
            font-family: monospace;
        }

        /* Show overlay on hover (for debugging) */
        body:hover .device-overlay {
            opacity: 1;
        }

        /* Hide scrollbars completely */
        ::-webkit-scrollbar {
            display: none;
        }

        body {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }
    </style>
</head>
<body>
    <div id="slideContainer">
        <!-- Loading state (shown initially) -->
        <div class="loading" id="loadingState">
            Loading presentation...
        </div>
        
        <!-- No content fallback (shown if no slideId) -->
        <div class="no-content" id="noContentState" style="display: none;">
            <h1>ðŸ“º</h1>
            <p>Full-Screen Display Ready</p>
            <p>No presentation configured</p>
            <div class="device-id">Device: {DEVICE_ID}</div>
        </div>
    </div>

    <script>
         // Template initialization
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Full-screen slideshow template loaded');
                      
            // Check if we have a slideId
            const urlParams = new URLSearchParams(window.location.search);
            const slideId = urlParams.get('slideId');
            const hasSlideId = slideId || '{PRESENTATION_ID}' !== '';
            
            // Wait a moment for the parent application to potentially set up slides
            setTimeout(() => {
                const slideIframe = document.querySelector('#slideContainer iframe');
                
                if (!hasSlideId || '{PRESENTATION_ID}' === '') {
                    console.log('No slideId configured, showing no-content state');
                    // Hide loading, show no-content message
                    document.getElementById('loadingState').style.display = 'none';
                    document.getElementById('noContentState').style.display = 'flex';
                } else {
                    console.log('SlideId found:', '{PRESENTATION_ID}');
                    // Keep loading state until iframe loads, then it will be replaced
                    
                    // If the parent hasn't created an iframe yet, create one with optimized parameters
                    setTimeout(() => {
                        if (!document.querySelector('#slideContainer iframe')) {
                            createOptimizedSlideIframe('{PRESENTATION_ID}');
                        }
                    }, 2000);
                }
            }, 1000);
            
            console.log('Full-screen template initialized for device: {DEVICE_ID}');
        });

        // Create an optimized iframe for full-screen display
        function createOptimizedSlideIframe(slideId) {
            if (!slideId || slideId === '') return;
            
            console.log('Creating optimized iframe for slideId:', slideId);
            
            const slideContainer = document.getElementById('slideContainer');
            
            // Clear loading state
            slideContainer.innerHTML = '';
            
            // Create iframe with optimized parameters for full-screen
            const iframe = document.createElement('iframe');
            iframe.src = `https://docs.google.com/presentation/d/${slideId}/embed?start=true&loop=true&delayms=5000&rm=minimal&slide=1`;
            iframe.style.width = '100%';
            iframe.style.height = '100%';
            iframe.style.border = 'none';
            iframe.style.minWidth = '100%';
            iframe.style.minHeight = '100%';
            iframe.style.objectFit = 'cover';
            iframe.allowFullscreen = true;
            iframe.setAttribute('allowfullscreen', 'true');
            iframe.setAttribute('webkitallowfullscreen', 'true');
            iframe.setAttribute('mozallowfullscreen', 'true');
            
            // Additional CSS to force stretching
            iframe.style.transform = 'scale(1.0)';
            iframe.style.transformOrigin = 'top left';
            
            slideContainer.appendChild(iframe);
            
            console.log('Optimized iframe created');
        }

        // Function to hide overlay after slides load (called by parent)
        window.hideLoadingForFullscreen = function() {
            console.log('Hiding loading state for full-screen slideshow');
            const loadingState = document.getElementById('loadingState');
            if (loadingState) {
                loadingState.style.display = 'none';
            }
        };

        // Dynamically adjust iframe size to eliminate black bars
        function adjustIframeForScreen() {
            const iframe = document.querySelector('#slideContainer iframe');
            if (!iframe) {
                console.log('No iframe found yet, will retry...');
                return false;
            }
            
            const screenWidth = window.innerWidth;
            const screenHeight = window.innerHeight;
            const screenRatio = screenWidth / screenHeight;
            const slideRatio = 16 / 9; // Standard Google Slides ratio
            
            console.log(`Screen: ${screenWidth}x${screenHeight} (ratio: ${screenRatio.toFixed(2)})`);
            console.log(`Slides ratio: ${slideRatio.toFixed(2)}`);
            
            if (screenRatio > slideRatio) {
                // Screen is wider than slides - make iframe taller to fill width
                const newHeight = screenWidth / slideRatio;
                iframe.style.width = '100vw';
                iframe.style.height = newHeight + 'px';
                iframe.style.marginTop = -((newHeight - screenHeight) / 2) + 'px';
                iframe.style.marginLeft = '0px';
                console.log(`Adjusting for wide screen: height=${newHeight}px, marginTop=${-((newHeight - screenHeight) / 2)}px`);
            } else {
                // Screen is taller than slides - make iframe wider to fill height
                const newWidth = screenHeight * slideRatio;
                iframe.style.width = newWidth + 'px';
                iframe.style.height = '100vh';
                iframe.style.marginLeft = -((newWidth - screenWidth) / 2) + 'px';
                iframe.style.marginTop = '0px';
                console.log(`Adjusting for tall screen: width=${newWidth}px, marginLeft=${-((newWidth - screenWidth) / 2)}px`);
            }
            
            return true;
        }

        // Monitor for iframe creation and adjust when found
        function monitorForIframe() {
            console.log('Monitoring for iframe creation...');
            
            const checkInterval = setInterval(() => {
                if (adjustIframeForScreen()) {
                    console.log('Iframe found and adjusted, stopping monitor');
                    clearInterval(checkInterval);
                }
            }, 500); // Check every 500ms
            
            // Stop monitoring after 30 seconds
            setTimeout(() => {
                clearInterval(checkInterval);
                console.log('Stopped monitoring for iframe (timeout)');
            }, 30000);
        }

        // Call adjustment function when iframe loads and on window resize
        window.addEventListener('load', () => {
            setTimeout(monitorForIframe, 1000);
        });
        window.addEventListener('resize', () => {
            setTimeout(adjustIframeForScreen, 100);
        });

        // Prevent any scrolling
        document.addEventListener('scroll', function(e) {
            e.preventDefault();
            window.scrollTo(0, 0);
        });

        // Prevent context menu (right-click) for cleaner display
        document.addEventListener('contextmenu', function(e) {
            e.preventDefault();
        });

        // Optional: Prevent text selection for cleaner appearance
        document.addEventListener('selectstart', function(e) {
            e.preventDefault();
        });
    </script>
</body>
</html>